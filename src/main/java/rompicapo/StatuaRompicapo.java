/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package rompicapo;

import java.awt.BorderLayout;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import java.util.function.Consumer;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 * 
 * Classe che implementa il minigioco in cui bisogna ribilanciare la bilancia della statua,
 * è usata un interfacia funzionale Consumer per eseguire del codice di GestioneComandiGioco.
 * Ad ogni peso è collegato il valore di tale peso tramite una HashMap
 * Il programma permette all'utente di trascinare i pesi al'interno del riquadro che dovrebbe 
 * rappresentare il piatto della bilancia (anche se non lo segue) ne ordina i pesi
 * e se l'utente clicca il tasto verifica se la loro somma è minore, maggiore o uguae rispettoa quella dell'altro peso,
 * cambiando di onseguenza lo sfondo della bilancia
 *
 * @author Giuseppe
 * 
 * 
 */
public class StatuaRompicapo extends javax.swing.JPanel {

    static boolean pannelloRisolto = false;

    
    Consumer statuaRisolta;
    Point coordinateBasePeso1;
    Point coordinateBasePeso2;
    Point coordinateBasePeso3;
    Point coordinateBasePeso4;
    Point coordinateBasePeso5;
    Point coordinateBasePeso6;
    
    private final int PESO_DA_RAGGIUNGERE = 8;
    
    HashMap<JPanel, Integer> pesoValore;
    Set pesiSuBilancia;
    
    JPanel pannelloPreso;
    
    public StatuaRompicapo(Consumer statuaRisolta) {
        initComponents();
        
        pannelloPreso = null;
        
        testoStatua.setText("""
                            
                            
                              La bilancia
                            non sembra essere
                            in equilibrio,
                            forse dovresti
                            interagirci
                            (cliccala)
                            """);
        
        testoBilancia.setText("""
                              
                                Trascina i pesi
                              sul piatto della
                              bilancia e
                              ristabilisci
                              l'equilibrio
                              
                              (premi il bottone
                              per confermare,
                              a ogni tentativo
                              si resettano 
                              i pesi)
                              """);
        
        
        pesiSuBilancia = new HashSet<JPanel> ();
        pesoValore = new HashMap<>();
        
        pesoValore.put(peso1, 7);
        pesoValore.put(peso2, 10);
        pesoValore.put(peso3, 2);
        pesoValore.put(peso4, 3);
        pesoValore.put(peso5, 4);
        pesoValore.put(peso6, 3);
        
        caricaSfondoStatua();
        contenitore.setComponentZOrder(sfondoStatua,1);
        contenitore.setComponentZOrder(pannelloStatua, 0);
        contenitore.setComponentZOrder(pannelloBilancia, 2);
        contenitore.setComponentZOrder(sfondoBilancia,3);
        
        pannelloTestoBilancia.setVisible(false);
        this.statuaRisolta = statuaRisolta;
        revalidate();
        repaint();
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contenitore = new javax.swing.JPanel();
        pannelloStatua = new javax.swing.JPanel();
        pannelloTestoStatua = new javax.swing.JPanel();
        testoStatua = new javax.swing.JTextArea();
        bilancia = new javax.swing.JPanel();
        pannelloBilancia = new javax.swing.JPanel();
        pannelloTestoBilancia = new javax.swing.JPanel();
        testoBilancia = new javax.swing.JTextArea();
        piattoBilancia = new javax.swing.JPanel();
        peso1 = new javax.swing.JPanel();
        peso2 = new javax.swing.JPanel();
        peso3 = new javax.swing.JPanel();
        peso4 = new javax.swing.JPanel();
        peso5 = new javax.swing.JPanel();
        peso6 = new javax.swing.JPanel();
        bottoneConferma = new javax.swing.JButton();
        sfondoStatua = new javax.swing.JPanel();
        sfondoBilancia = new javax.swing.JPanel();

        setMaximumSize(new java.awt.Dimension(559, 327));
        setOpaque(false);

        contenitore.setBackground(new java.awt.Color(45, 196, 222));
        contenitore.setLayout(new javax.swing.OverlayLayout(contenitore));

        pannelloStatua.setBackground(new java.awt.Color(45, 196, 222));
        pannelloStatua.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        pannelloStatua.setOpaque(false);
        pannelloStatua.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pannelloStatuaMouseClicked(evt);
            }
        });

        pannelloTestoStatua.setBackground(new java.awt.Color(153, 0, 255));
        pannelloTestoStatua.setPreferredSize(new java.awt.Dimension(86, 214));
        pannelloTestoStatua.setRequestFocusEnabled(false);

        testoStatua.setEditable(false);
        testoStatua.setColumns(20);
        testoStatua.setRows(5);
        testoStatua.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        testoStatua.setFocusable(false);

        javax.swing.GroupLayout pannelloTestoStatuaLayout = new javax.swing.GroupLayout(pannelloTestoStatua);
        pannelloTestoStatua.setLayout(pannelloTestoStatuaLayout);
        pannelloTestoStatuaLayout.setHorizontalGroup(
            pannelloTestoStatuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pannelloTestoStatuaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(testoStatua, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                .addContainerGap())
        );
        pannelloTestoStatuaLayout.setVerticalGroup(
            pannelloTestoStatuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pannelloTestoStatuaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(testoStatua, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                .addContainerGap())
        );

        bilancia.setBackground(new java.awt.Color(164, 172, 180));
        bilancia.setOpaque(false);

        javax.swing.GroupLayout bilanciaLayout = new javax.swing.GroupLayout(bilancia);
        bilancia.setLayout(bilanciaLayout);
        bilanciaLayout.setHorizontalGroup(
            bilanciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 137, Short.MAX_VALUE)
        );
        bilanciaLayout.setVerticalGroup(
            bilanciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 125, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pannelloStatuaLayout = new javax.swing.GroupLayout(pannelloStatua);
        pannelloStatua.setLayout(pannelloStatuaLayout);
        pannelloStatuaLayout.setHorizontalGroup(
            pannelloStatuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pannelloStatuaLayout.createSequentialGroup()
                .addContainerGap(238, Short.MAX_VALUE)
                .addComponent(bilancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(pannelloTestoStatua, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pannelloStatuaLayout.setVerticalGroup(
            pannelloStatuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pannelloStatuaLayout.createSequentialGroup()
                .addContainerGap(42, Short.MAX_VALUE)
                .addGroup(pannelloStatuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pannelloStatuaLayout.createSequentialGroup()
                        .addComponent(pannelloTestoStatua, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pannelloStatuaLayout.createSequentialGroup()
                        .addComponent(bilancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))))
        );

        contenitore.add(pannelloStatua);

        pannelloBilancia.setBackground(new java.awt.Color(102, 255, 0));
        pannelloBilancia.setOpaque(false);
        pannelloBilancia.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                pannelloBilanciaMouseDragged(evt);
            }
        });
        pannelloBilancia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                pannelloBilanciaMouseReleased(evt);
            }
        });

        pannelloTestoBilancia.setBackground(new java.awt.Color(93, 44, 103));
        pannelloTestoBilancia.setRequestFocusEnabled(false);

        testoBilancia.setEditable(false);
        testoBilancia.setColumns(20);
        testoBilancia.setRows(5);

        javax.swing.GroupLayout pannelloTestoBilanciaLayout = new javax.swing.GroupLayout(pannelloTestoBilancia);
        pannelloTestoBilancia.setLayout(pannelloTestoBilanciaLayout);
        pannelloTestoBilanciaLayout.setHorizontalGroup(
            pannelloTestoBilanciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pannelloTestoBilanciaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(testoBilancia, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                .addContainerGap())
        );
        pannelloTestoBilanciaLayout.setVerticalGroup(
            pannelloTestoBilanciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pannelloTestoBilanciaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(testoBilancia, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                .addContainerGap())
        );

        piattoBilancia.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        piattoBilancia.setFocusable(false);
        piattoBilancia.setOpaque(false);

        javax.swing.GroupLayout piattoBilanciaLayout = new javax.swing.GroupLayout(piattoBilancia);
        piattoBilancia.setLayout(piattoBilanciaLayout);
        piattoBilanciaLayout.setHorizontalGroup(
            piattoBilanciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 126, Short.MAX_VALUE)
        );
        piattoBilanciaLayout.setVerticalGroup(
            piattoBilanciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );

        peso1.setBackground(new java.awt.Color(160, 170, 165));
        peso1.setOpaque(false);

        javax.swing.GroupLayout peso1Layout = new javax.swing.GroupLayout(peso1);
        peso1.setLayout(peso1Layout);
        peso1Layout.setHorizontalGroup(
            peso1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 41, Short.MAX_VALUE)
        );
        peso1Layout.setVerticalGroup(
            peso1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 39, Short.MAX_VALUE)
        );

        peso2.setBackground(new java.awt.Color(160, 170, 165));
        peso2.setOpaque(false);

        javax.swing.GroupLayout peso2Layout = new javax.swing.GroupLayout(peso2);
        peso2.setLayout(peso2Layout);
        peso2Layout.setHorizontalGroup(
            peso2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 41, Short.MAX_VALUE)
        );
        peso2Layout.setVerticalGroup(
            peso2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 39, Short.MAX_VALUE)
        );

        peso3.setBackground(new java.awt.Color(160, 170, 165));
        peso3.setOpaque(false);

        javax.swing.GroupLayout peso3Layout = new javax.swing.GroupLayout(peso3);
        peso3.setLayout(peso3Layout);
        peso3Layout.setHorizontalGroup(
            peso3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 41, Short.MAX_VALUE)
        );
        peso3Layout.setVerticalGroup(
            peso3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 39, Short.MAX_VALUE)
        );

        peso4.setBackground(new java.awt.Color(160, 170, 165));
        peso4.setOpaque(false);

        javax.swing.GroupLayout peso4Layout = new javax.swing.GroupLayout(peso4);
        peso4.setLayout(peso4Layout);
        peso4Layout.setHorizontalGroup(
            peso4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 41, Short.MAX_VALUE)
        );
        peso4Layout.setVerticalGroup(
            peso4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 39, Short.MAX_VALUE)
        );

        peso5.setBackground(new java.awt.Color(160, 170, 165));
        peso5.setOpaque(false);

        javax.swing.GroupLayout peso5Layout = new javax.swing.GroupLayout(peso5);
        peso5.setLayout(peso5Layout);
        peso5Layout.setHorizontalGroup(
            peso5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 41, Short.MAX_VALUE)
        );
        peso5Layout.setVerticalGroup(
            peso5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 39, Short.MAX_VALUE)
        );

        peso6.setBackground(new java.awt.Color(160, 170, 165));
        peso6.setOpaque(false);

        javax.swing.GroupLayout peso6Layout = new javax.swing.GroupLayout(peso6);
        peso6.setLayout(peso6Layout);
        peso6Layout.setHorizontalGroup(
            peso6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 41, Short.MAX_VALUE)
        );
        peso6Layout.setVerticalGroup(
            peso6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 39, Short.MAX_VALUE)
        );

        bottoneConferma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottoneConfermaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pannelloBilanciaLayout = new javax.swing.GroupLayout(pannelloBilancia);
        pannelloBilancia.setLayout(pannelloBilanciaLayout);
        pannelloBilanciaLayout.setHorizontalGroup(
            pannelloBilanciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pannelloBilanciaLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(peso1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(peso2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(peso3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pannelloBilanciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pannelloBilanciaLayout.createSequentialGroup()
                        .addComponent(peso4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(peso5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(peso6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 83, Short.MAX_VALUE))
                    .addGroup(pannelloBilanciaLayout.createSequentialGroup()
                        .addComponent(bottoneConferma, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(piattoBilancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pannelloTestoBilancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );
        pannelloBilanciaLayout.setVerticalGroup(
            pannelloBilanciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pannelloBilanciaLayout.createSequentialGroup()
                .addGroup(pannelloBilanciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pannelloBilanciaLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(pannelloTestoBilancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pannelloBilanciaLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(piattoBilancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 95, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pannelloBilanciaLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pannelloBilanciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(peso1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(peso5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pannelloBilanciaLayout.createSequentialGroup()
                        .addComponent(bottoneConferma, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(peso4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(peso6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(peso3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(peso2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(84, 84, 84))
        );

        contenitore.add(pannelloBilancia);

        javax.swing.GroupLayout sfondoStatuaLayout = new javax.swing.GroupLayout(sfondoStatua);
        sfondoStatua.setLayout(sfondoStatuaLayout);
        sfondoStatuaLayout.setHorizontalGroup(
            sfondoStatuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 559, Short.MAX_VALUE)
        );
        sfondoStatuaLayout.setVerticalGroup(
            sfondoStatuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 327, Short.MAX_VALUE)
        );

        contenitore.add(sfondoStatua);

        sfondoBilancia.setBackground(new java.awt.Color(0, 153, 51));
        sfondoBilancia.setLayout(new javax.swing.OverlayLayout(sfondoBilancia));
        contenitore.add(sfondoBilancia);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenitore, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenitore, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void pannelloStatuaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pannelloStatuaMouseClicked
        
        if(mouseSuPannello(bilancia, evt)){
            
            contenitore.setComponentZOrder(pannelloStatua, 2);
            contenitore.setComponentZOrder(pannelloBilancia, 0);
            contenitore.setComponentZOrder(sfondoStatua,3);
            contenitore.setComponentZOrder(sfondoBilancia,1);
            pannelloTestoBilancia.setVisible(true);
            
            coordinateBasePeso1 = peso1.getLocation();
            coordinateBasePeso2 = peso2.getLocation();
            coordinateBasePeso3 = peso3.getLocation();
            coordinateBasePeso4 = peso4.getLocation();
            coordinateBasePeso5 = peso5.getLocation();
            coordinateBasePeso6 = peso6.getLocation();
            

            caricaElementiBilancia();
            revalidate();
            repaint();
            
        }
    }//GEN-LAST:event_pannelloStatuaMouseClicked

    
    //sposta pesi
    private void pannelloBilanciaMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pannelloBilanciaMouseDragged
        // TODO add your handling code here:
        if(pannelloPrendibile(peso1, evt)){
            prendiSpostaPannello(peso1, evt);
        } else if (pannelloPrendibile(peso2, evt)){
            prendiSpostaPannello(peso2, evt);
        } else if (pannelloPrendibile(peso3, evt)){
            prendiSpostaPannello(peso3, evt);
        } else if (pannelloPrendibile(peso4, evt)){
            prendiSpostaPannello(peso4, evt);
        } else if (pannelloPrendibile(peso5, evt)){
            prendiSpostaPannello(peso5, evt);
        } else if (pannelloPrendibile(peso6, evt)){
            prendiSpostaPannello(peso6, evt);
        }
    }//GEN-LAST:event_pannelloBilanciaMouseDragged

    private boolean pannelloPrendibile(JPanel pannello, java.awt.event.MouseEvent evt){
        return mouseSuPannello(pannello, evt) && (pannelloPreso == null || pannelloPreso.equals(pannello));
    }
    
    private void prendiSpostaPannello(JPanel pannello, java.awt.event.MouseEvent evt){
        pannelloPreso = pannello;
        pannello.setLocation(evt.getX() - (pannello.getWidth()/2) ,evt.getY() - (pannello.getHeight()/2) );
    }
    
    
    private void pannelloBilanciaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pannelloBilanciaMouseReleased
        // TODO add your handling code here:
        
        pannelloPreso = null;
        
        if(puntoInPannello(piattoBilancia, getCentroPannello(peso1)) ){
            pesiSuBilancia.add(peso1);
        } else {
            pesiSuBilancia.remove(peso1);
            peso1.setLocation(coordinateBasePeso1);
        }
        if(puntoInPannello(piattoBilancia, getCentroPannello(peso2))){
            pesiSuBilancia.add(peso2);
        }else {
            pesiSuBilancia.remove(peso2);
            peso2.setLocation(coordinateBasePeso2);
        }
        if(puntoInPannello(piattoBilancia, getCentroPannello(peso3))){
            pesiSuBilancia.add(peso3);
        }else {
            pesiSuBilancia.remove(peso3);
            peso3.setLocation(coordinateBasePeso3);
        }
        if(puntoInPannello(piattoBilancia, getCentroPannello(peso4))){
            pesiSuBilancia.add(peso4);
        }else {
            pesiSuBilancia.remove(peso4);
            peso4.setLocation(coordinateBasePeso4);
        }
        if(puntoInPannello(piattoBilancia, getCentroPannello(peso5))){
            pesiSuBilancia.add(peso5);
        }else {
            pesiSuBilancia.remove(peso5);
            peso5.setLocation(coordinateBasePeso5);
        }
        if(puntoInPannello(piattoBilancia, getCentroPannello(peso6))){
            pesiSuBilancia.add(peso6);
        }else {
            pesiSuBilancia.remove(peso6);
            peso6.setLocation(coordinateBasePeso6);
        }
        
        ordinaPannelliBilancia();
        
    }//GEN-LAST:event_pannelloBilanciaMouseReleased

    private void bottoneConfermaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottoneConfermaActionPerformed
        //controlla se i pesi sono stati messi bene e in tal caso chiama l'implementazione passata
        //bisogna disattivare la prendibilità dei pesi quando si clicca il bottone
        Iterator iteratoreBilancia = pesiSuBilancia.iterator();
        int sommaPesi = 0;
        while(iteratoreBilancia.hasNext()){
            sommaPesi = pesoValore.get(iteratoreBilancia.next()) + sommaPesi;
        }
        
        //problema il pannello dei pesi non segue il piatto della statua che cambia
        //perchè per aqualche motivo il set location non funziona, probabilmente è causato dal "sfondoBilania.revalidate()"
        //che è però necessario per cambiare lo sfondo, feedback più importante per l'utente
        sfondoBilancia.removeAll();
        
        if(sommaPesi < PESO_DA_RAGGIUNGERE){
            immagineInPannello("img/statua/sfondoBilancia.png", sfondoBilancia );
        } else if(sommaPesi > PESO_DA_RAGGIUNGERE){
            immagineInPannello("img/statua/sfondoBilanciaDestra.png", sfondoBilancia );
        } else if( PESO_DA_RAGGIUNGERE == sommaPesi){
            if(!pannelloRisolto){
                pannelloRisolto = true;
                statuaRisolta.accept(true);
            }

            immagineInPannello("img/statua/sfondoBilanciaBilanciata.png", sfondoBilancia );
            
        }
        sfondoBilancia.revalidate();
        repaint();
        
        
    }//GEN-LAST:event_bottoneConfermaActionPerformed

    private void ordinaPannelliBilancia(){
        Iterator<JPanel> iteratorePannelli = pesiSuBilancia.iterator();
        int counterPannelliPerLivello = 0;
        int livelloBilancia = 1;
        
        int altezzaPesi = peso1.getHeight();
        int larghezzaPesi = peso1.getWidth();
        int xBasePiattoBilanciaSinistra = piattoBilancia.getX();
        int yBasePiattoBilanciaSinistra = piattoBilancia.getY() + piattoBilancia.getHeight();
        
        int maxPannelliPerLivello = 3;
        
        while(iteratorePannelli.hasNext()){
            if(counterPannelliPerLivello == maxPannelliPerLivello){
                counterPannelliPerLivello = 0;
                livelloBilancia++;
            }
            
            switch (livelloBilancia) {
                case 1 -> iteratorePannelli.next().setLocation(
                            xBasePiattoBilanciaSinistra + (counterPannelliPerLivello * larghezzaPesi),
                            yBasePiattoBilanciaSinistra - (altezzaPesi * livelloBilancia));
                case 2 -> {
                    iteratorePannelli.next().setLocation(
                            xBasePiattoBilanciaSinistra + (counterPannelliPerLivello * larghezzaPesi) +
                                    piattoBilancia.getWidth()/6,
                            yBasePiattoBilanciaSinistra - (altezzaPesi * livelloBilancia));
                    maxPannelliPerLivello = 2;
                }
                case 3 -> iteratorePannelli.next().setLocation(
                            xBasePiattoBilanciaSinistra + (counterPannelliPerLivello * larghezzaPesi) +
                                    piattoBilancia.getWidth()/3,
                            yBasePiattoBilanciaSinistra - (altezzaPesi * livelloBilancia));
                default -> {
                }
            }
            
            counterPannelliPerLivello++;
            
        }
        
    }
   
    private Point getCentroPannello(JPanel pannello){
        int x = pannello.getX() + (pannello.getWidth() /2);
        int y = pannello.getY() + (pannello.getHeight() /2);
        return new Point(x, y);
    }
    
    private boolean puntoInPannello(JPanel pannello, Point punto){
        boolean flagPuntoInterno = false;
        int pannelloMinX = pannello.getX();
        int pannelloMaxX = pannelloMinX + pannello.getWidth();
        int pannelloMinY = pannello.getY();
        int pannelloMaxY = pannelloMinY + pannello.getHeight();
        
        if(pannelloMinX < punto.getX() && punto.getX() < pannelloMaxX &&
                pannelloMinY < punto.getY() && punto.getY() < pannelloMaxY){
            flagPuntoInterno = true;
        }
        return flagPuntoInterno;
    }
    
    
    private boolean mouseSuPannello(JPanel pannello, MouseEvent e) {
        return puntoInPannello(pannello, new Point(e.getX(),e.getY()));
    }
    
    private void caricaSfondoStatua(){
        immagineInPannello("img/statua/statuaDefault.png", sfondoStatua );
        immagineInPannello("img/statua/sfondoBilancia.png", sfondoBilancia );
        immagineInPannello("img/statua/pesoDa7.png",peso1);
        immagineInPannello("img/statua/pesoDa10.png",peso2);
        immagineInPannello("img/statua/pesoDa2.png",peso3);
        immagineInPannello("img/statua/pesoDa3var.png",peso4);
        immagineInPannello("img/statua/pesoDa4.png",peso5);
        immagineInPannello("img/statua/pesoDa3var.png", peso6 );
    }
    
    private void caricaElementiBilancia(){
        
    }
    
    private void immagineInPannello(String percorsoImmagine, JPanel pannello){
        ImageIcon icona = new ImageIcon(percorsoImmagine);
        JLabel label = new JLabel( icona);
        pannello.setLayout(new BorderLayout());
        pannello.add(label);
        
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bilancia;
    private javax.swing.JButton bottoneConferma;
    private javax.swing.JPanel contenitore;
    private javax.swing.JPanel pannelloBilancia;
    private javax.swing.JPanel pannelloStatua;
    private javax.swing.JPanel pannelloTestoBilancia;
    private javax.swing.JPanel pannelloTestoStatua;
    private javax.swing.JPanel peso1;
    private javax.swing.JPanel peso2;
    private javax.swing.JPanel peso3;
    private javax.swing.JPanel peso4;
    private javax.swing.JPanel peso5;
    private javax.swing.JPanel peso6;
    private javax.swing.JPanel piattoBilancia;
    private javax.swing.JPanel sfondoBilancia;
    private javax.swing.JPanel sfondoStatua;
    private javax.swing.JTextArea testoBilancia;
    private javax.swing.JTextArea testoStatua;
    // End of variables declaration//GEN-END:variables
}

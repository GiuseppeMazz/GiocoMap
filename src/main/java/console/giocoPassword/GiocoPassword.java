/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package console.giocoPassword;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 * Classe adibita al GiocoPassword
 * ispirato dall'omonimo "The Password Game" è un semplice e breve giochino che utilizza le regex
 * o l'analisi della stringa per cercare di far comporre un pattern di caratteri più o meno strano all'utente
 * @author Giuseppe
 */
public class GiocoPassword extends javax.swing.JPanel {

    public GiocoPassword() {
        initComponents();
        schermataOutput.setContentType("text/html");
        
        scriviTerminaleUtente("Inserisci una password soddisfacente ");
        
        inputUtente.requestFocusInWindow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputUtente = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        schermataOutput = new javax.swing.JEditorPane();

        setBackground(new java.awt.Color(255, 204, 102));
        setMaximumSize(new java.awt.Dimension(501, 300));

        inputUtente.setText("inserisci la password");
        inputUtente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordInserita(evt);
            }
        });

        jScrollPane1.setFocusable(false);

        schermataOutput.setEditable(false);
        schermataOutput.setBackground(new java.awt.Color(255, 204, 153));
        schermataOutput.setFocusable(false);
        jScrollPane1.setViewportView(schermataOutput);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputUtente)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(inputUtente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void passwordInserita(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordInserita
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            String input = inputUtente.getText();
            scriviTerminaleUtente(input);
            inputUtente.setText("");
            scriviTerminaleSistema(controllaPassword(input));
            
            
        }
        
    }//GEN-LAST:event_passwordInserita
    
    
    public boolean controllaInput(String messaggio){
        return false;
    }

    private void scriviTerminaleUtente(String messaggio){
         //inserisco il testo prendendo un documento che esiste di per se nel jEditorpane
        Document documento = schermataOutput.getDocument();
        try {
            documento.insertString(documento.getLength(), messaggio + "\n", null);
            inputUtente.setText("");
        } catch (BadLocationException ex) {
            Logger.getLogger(GiocoPassword.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void scriviTerminaleSistema(String messaggio){
        //Document documento = schermataOutput.getDocument();
        StyledDocument documento = (StyledDocument) schermataOutput.getDocument();
        SimpleAttributeSet setAttributi = new SimpleAttributeSet();
        StyleConstants.setBackground(setAttributi, new Color(245, 215, 185));
        
        try {
            documento.insertString(documento.getLength(), " Sistema: " + messaggio + "\n", setAttributi);
            inputUtente.setText("");
        } catch (BadLocationException ex) {
            Logger.getLogger(GiocoPassword.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private String controllaPassword(String messaggio){
        //List<String> i = List.of("");
        String feedback= "";
        //messaggio = messaggio.toLowerCase();
        //contiene almeno 7 lettere
        if(messaggio.matches(".*([A-z]){7,}.*" )){
            //ha almeno un numero
            if(messaggio.matches(".*[1-9].*")){
                //deve contenere almeno uno tra @ < >
                if(messaggio.matches(".*(<|>).*")){
                    //deve contenere almeno uno dei mesi
                    if(messaggio.matches(".*(gennaio|febbraio|marzo|aprile|maggio|giugno|luglio|agosto|settembre|ottobre|novembre|dicembre).*"
                           + "|.*(Gennaio|Febbraio|Marzo|Aprile|Maggio|Giugno|Luglio|Agosto|Settembre|Ottobre|Novembre|Dicembre).*")){
                       
                        //controlla che la stringa inizi con xX e finisca con Xx
                        if(messaggio.matches("(^(xX).*(Xx)$)")){
                            //controlla i sia @ nella stringa
                            if(messaggio.matches(".*@.*")){
                                //conta le vocali a destra e a sinistra di @
                                if(contaVocali(messaggio.substring(0, messaggio.indexOf("@")))
                                        == contaVocali(messaggio.substring(messaggio.indexOf("@")))){
                                
                                    //controlla se il messaggio contiene minore o maggiore e poi
                                    //vede se viene rispettata la codizione del simbolo è soddisfatta
                                    if(messaggio.contains("<" )){
                                        if(sommaCifre(messaggio.substring(0, messaggio.indexOf("<")))
                                                < sommaCifre(messaggio.substring(messaggio.indexOf("<")))){
                                            feedback = "Fine";
                                        }else{feedback = "La somma delle CIFRE (consiferate singolarmente) nella password non rispetta il simbolo < inserito";}
                                    }
                                    if(messaggio.contains(">")){
                                        if(sommaCifre(messaggio.substring(0, messaggio.indexOf(">")-1))
                                                > sommaCifre(messaggio.substring(messaggio.indexOf(">") + 1))){
                                            feedback = "Fine";
                                        }else{feedback = "La somma delle CIFRE (considerate singolarmente) nella password non rispetta il simbolo > inserito";}

                                    }
                                }else{feedback = "Il numero di vocali deve essere uguale a destra e a sinistra rispetto a @";}
                            }else{feedback = "La password deve contenere almeno una @";}
                        }else{feedback = "La password deve iniziare  finire con xX Xx";}
                       
                    }else{feedback = "La password deve avere almeno un mese";}
                   
                }else{feedback = "La password deve avere almeno un simbolo tra (<, >)";}
               
            }else{feedback = "La password deve avere almeno una cifra";}
            
        }else{feedback = "La password deve avere almeno 7 lettere consecutive";}
        
        return feedback;
    }
    
    
    private int contaVocali(String messaggio){
        int contatore = 0;
        for (int i=0;i < messaggio.length() ; i++){
            if(messaggio.charAt(i) == 'a' || messaggio.charAt(i) == 'e'
                    || messaggio.charAt(i) == 'i'
                    || messaggio.charAt(i) == 'o'
                    || messaggio.charAt(i) == 'u'){
                contatore++;
            }
            
        }
        return contatore;
    }
    
    
    
    private int sommaCifre(String messaggio) {
        int somma = 0;
        for(int i=0; i < messaggio.length(); i++){
            if(Character.isDigit(messaggio.charAt(i))){
                somma = Character.getNumericValue(messaggio.charAt(i)) + somma;
            }
        }
        return somma;
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField inputUtente;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JEditorPane schermataOutput;
    // End of variables declaration//GEN-END:variables
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package console.giocoSchivaBlocchi;

import java.awt.Color;
import static java.lang.Thread.sleep;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Ogni barriera avrà un metodo run
 * e partirà per conto suo, inoltre alla sua inizializzazione sarà dato un limite
 * che sarà la x del "player" / rettangolo base, il thread della singola barriera sarà indipendente 
 * ma raggiunta la x prestabilita verrà richiamato un metodo per controllare
 * che il player non sbatta contro la barriera
 * 
 * 
 * @author Giuseppe
 */
public class Barriera extends javax.swing.JPanel implements Runnable{
    private final int VELOCITA_SCORRIMENTO = 10;
    private final int FREQUENZA_SCORRIMENTO = 7;
    private final int limiteX;
    private final int fineLimite;
    
    //interfaccia per la comunicazione con "GiocoSchivaBlocchi"
    private final UpdateDalThread aggiornamento;
    boolean vitaThread;
    
    /**
     * Creates new form barriera
     * @param altezza passato da GiocoSchivaBlocchi per avere dimensioni uniformi a quelle del blocco Player
     * @param lunghezza passato da GiocoSchivaBlocchi per avere dimensioni uniformi a quelle del blocco Player
     * @param x cordinata x dello spawn base del blocco
     * @param y coordinata y dello spawn base del blocco
     * @param limite passa il valore di x che corrisponde dove si trova il blocco player,
     *          da cui dovrà essere considerata zona di possibile collisione
     * @param fineLimite passa il valore di x in cui la barriera ha ormai superato il blocco player,
     *          quindi non ci può più essere collisione
     * @param update è l'istanza dell'interfaccia "Update del Thread" implementata in "GiocoSchivaBlocchi" da chiamare per
     *          verificare la collisioine
     */
    public Barriera( int lunghezza, int altezza, int x, int y, int limite,
            int fineLimite, UpdateDalThread update) {
        initComponents();
        setSize(lunghezza,altezza);
        setBackground(Color.black);
        setLocation(x,y);
        limiteX = limite;
        
        aggiornamento = update;
        
        vitaThread = true;
        this.fineLimite = fineLimite;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 28, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 79, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void run() {
        while(vitaThread){
            try {
                if(getX() > limiteX){
                    setLocation(getX() - VELOCITA_SCORRIMENTO, getY());
                    sleep(FREQUENZA_SCORRIMENTO);
                } else if(getX() < fineLimite) {
                    if(getX() == 0){
                        aggiornamento.distruggiBarriera(this);
                    }
                    setLocation(getX() - VELOCITA_SCORRIMENTO, getY());
                    sleep(FREQUENZA_SCORRIMENTO);
                } else if(aggiornamento.controllaCollisione(getY())){
                        aggiornamento.distruggiBarriera(this);
                        //Thread.currentThread().interrupt();
                        vitaThread = false;
                } else {
                    setLocation(getX() - VELOCITA_SCORRIMENTO, getY());
                    sleep(FREQUENZA_SCORRIMENTO);
                }
            } catch (InterruptedException ex) {
                Logger.getLogger(Barriera.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
